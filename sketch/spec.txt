This document describes what the Web::URL::Parser module implements.
It is built on the top of following specs:

- url-spec
- WA1 URL
- RFC 3986

* /encoding/

If the character encoding specified as /encoding/ is not an
ASCII-compatible character encoding [WA1], /encoding/ MUST be set to
UTF-8 instead.

* Unreserved characters

The *unreserved characters* is: U+002D (-), U+002E (.), U+0030 (0) to
U+0039 (9), U+0041 (A) to U+005A (Z), U+005F (_), U+0061 (a) to U+007A
(z), and U+007E (~), inclusive.

A *non-unreserved octet* is an octet that does not represent an
unreserved character when the octet is interpreted as a US-ASCII
character.

* Preprocessing of a string /s/

  Remove leading or trailing control characters [url-spec].

  Replace any character in the following range by a U+FFFD REPLACEMENT
  CHARACTER:

    - U+D800 ... U+DFFF
    - U+FDD0 ... U+FDEF
    - U+FFFE, U+FFFF, U+1FFFE, U+1FFFF, U+2FFFE, U+2FFFF, U+3FFFE,
      U+3FFFF, U+4FFFE, U+4FFFF, U+5FFFE, U+5FFFF, U+6FFFE, U+6FFFF,
      U+7FFFE, U+7FFFF, U+8FFFE, U+8FFFF, U+9FFFE, U+9FFFF, U+AFFFE,
      U+AFFFF, U+BFFFE, U+BFFFF, U+CFFFE, U+CFFFF, U+DFFFE, U+DFFFF,
      U+EFFFE, U+EFFFF, U+FFFFE, U+FFFFF, U+10FFFE, U+10FFFF
    - Non-Unicode characters

  XXX maybe white space characters should be removed here.

  XXX and U+0000 -> U+FFFD.

* Parsing an absolute URL /s/

  Preprocess the string /s/.

  Apply url-spec's steps.

* Merge path

  Apply RFC 3986's steps, but use "slash character" definition instead
  of "/" character for comparison.

* Remove dot-segments from a string /s/

  Replace any U+005C REVERSE SOLIDUS (\) character in /s/ by a U+002F
  SOLIDUS (/) character.

  Apply RFC 3986's steps.

* Resolution

  If parsing the base URL results in "invalid", the resolved URL
  cannot be resolved.  Abort the steps.

  Preprocess the resolved URL as /s/.

  Trim the control characters.

  Apply url-spec's steps.

  If the |scheme| components of resolved and base URLs differ, and if
  the resolved URL's scheme is hierarchical, parse the resolved URL as
  an absolute URL, and then remove dot-segments [RFC 3986] from the
  |path| component, if any.

** Resolve as a scheme-relative URL

  Remove dot-segments from the |path| component.

  Apply url-spec's steps.

** Resolve as a authority-relative URL

  Remove dot-segments from the |path| component.

  Apply url-spec's steps.

** Resolve as a path-relative URL

  Apply RFC 3986 algorithm.

* Percent-encode a character string /s/ using encoding /encoding/

  XXX Replace each character in the following range in /s/ by a U+FFFD
  REPLACEMENT CHARACTER:

    - U+0000

  Replace each character in /s/ which cannot be represented in
  /encoding/ by a U+003F QUESTION MARK character (?).

  Encode /s/ in encoding /encoding/.

  Percent-encode non-unreserved octets in /s/.

* Canonicalize a string /u/ by encoding /encoding/

  XXX Remove characters U+0009, U+000A, and U+000D from /u/.

  XXX scheme

  If there is the |user| component or the |password| component in /u/:

    If there is the |password| component in /u/ and it is the empty
    string, remove the |password| component (and preceding U+003A
    COLON character (:)).

    If the |user| component is the empty string and there is no
    |password| component, remove the |user| component (and following
    U+0040 COMMERCIAL AT character (@)).

    Percent-encode characters EXCEPT for unreserved characters, U+0021
    (!), U+0024 ($), U+0025 (%), U+0026 (&), U+0027 ('), U+0028 ((),
    U+0029 ()), U+002A (*), U+002B (+), U+002D (,), in the |user|
    component of /u/, using encoding |UTF-8|.

    Percent-encode characters EXCEPT for unreserved characters, U+0021
    (!), U+0024 ($), U+0025 (%), U+0026 (&), U+0027 ('), U+0028 ((),
    U+0029 ()), U+002A (*), U+002B (+), U+002D (,), in the |password|
    component of /u/, using encoding |UTF-8|, if any.

  XXX host

  If there is the |port| component in /u/:

    If the |port| component is the empty string, remove the |port|
    component (and preceding U+003A COLON character (:)).

    Otherwise, if the |port| component consist of one or more sequence
    of characters in the range U+0030 to U+0039, inclusive:

      Interpret the |port| component as a decimal number and let /p/
      be that number.

      If /p/ is equal to the default port of the scheme of /u/, if
      any, remove the |port| component (and preceding U+003A COLON
      character (:)).

      Otherwise, if /p/ is less than or equal to 65535, replace the
      |port| component by the shortest representation of /p/ in
      decimal, using characters in the range U+0030 to U+0039,
      inclusive.

      Otherwise, /u/ is invalid.  Abort the entire steps.

    Otherwise, /u/ is invalid.  Abort the entire steps.

  XXX If no path

  Percent-decode percent-encoded representations of unreserved
  characters in the |path| component of /u/.

  Percent-encode characters EXCEPT for unreserved characters, U+0021
  (!), U+0024 ($), U+0025 (%), U+0026 (&), U+0027 ('), U+0028 ((),
  U+0029 ()), U+002A (*), U+002B (+), U+002D (,), U+002F (/), U+003A
  (:), U+003B (;), U+003D (=), U+0040 (@), U+005B ([), U+005D (]), in
  the |path| component of /u/, using encoding |UTF-8|.

  Percent-encode characters EXCEPT for unreserved characters, U+0021
  (!), U+0024 ($), U+0025 (%), U+0026 (&), U+0027 ('), U+0028 ((),
  U+0029 ()), U+002A (*), U+002B (+), U+002D (,), U+002F (/), U+003A
  (:), U+003B (;), U+003D (=), U+0040 (@), U+005B ([), U+005D (]),
  U+005C (\), U+005E (^), U+0060 (`), U+007B ({), U+007C (|), U+007D
  (}), in the |query| component of /u/, using encoding /encoding/
  [WA1].

  Percent-encode characters U+0000 ... U+0020, U+0022 ("), U+003C (<),
  U+003E (>), U+007F ... U+009F, in the |fragment| component of /u/,
  using encoding |UTF-8|.

  XXX Non-hierarchical

  XXX Non-http

* Serialization of parsed URL

  If the parsed URL is /invalid/, abort these steps.

  Let /s/ be the empty string.

  Append the |scheme| component to /s/.

  Append a U+003A COLON (:) character to /s/.

  If there is at least one of |user|, |password|, |host|, and |port|
  components (even if it is the empty string):

    Append |//| (two U+002F SOLIDUS (/) characters) to /s/.

    If there is at least one of |user| and |password| component (even
    if it is the empty string):

      Append the |user| component, if any, to /s/.

      If there is the |password| component (even if it is the empty
      string):

        Append a U+003A COLON (:) character to /s/.

        Append the |password| component to /s/.

      Append a U+0040 COMMERCIAL AT (@) character to /s/.

    Append the |host| component, if any, to /s/.

    If there is the |port| component (even if it is the empty string):

      Append a U+003A COLON (:) character to /s/.

      Append the |port| component to /s/.

  Append the |path| component, if any, to /s/.

  If there is the |query| component (even if it is the empty string):

    Append a U+003F QUESTION MARK (?) character to /s/.

    Append the |query| component to /s/.

  If there is the |fragment| component (even if it is the empty
  string):

    Append a U+0023 NUMBER SIGN (#) character to /s/.

    Append the |fragment| component to /s/.

  Return /s/.
